<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql</title>
    <url>/2025/08/31/mysql/</url>
    <content><![CDATA[<h3 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础:"></a>SQL基础:</h3><p>联表查询:</p>
<p>用join比where效率高</p>
<p>group by:</p>
<p>通常和聚合函数一起使用</p>
<p>in和exact:</p>
<p>in:左边的表达式在右边的列表中就返回true</p>
<p>exact:子查询语句能查到数据就返回true</p>
<p>varchar和char:</p>
<p>char是定长的，效率高</p>
<p>varchar是变长的，节省空间</p>
<p>int(1)和int(10)有什么不同:</p>
<p>只是会在小于位数的时候有补零显示</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎:"></a>存储引擎:</h3><p>sql请求的过程是什么:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1756207281261-fcae5dc2-bbae-4757-84df-35936bae840c.png" alt="img"></p>
<p>数据文件:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1756206368814-fabdbd27-7195-4e2f-a0b5-39a5064ca016.png" alt="img"></p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引:"></a>索引:</h3><p>索引是为了提高搜索的效率，通过普通索引搜索会进行回表（这是最优的查询方式）。</p>
<p>要想提高效率只能提高回表效率，提高回表效率的方式有索引覆盖和索引下推。</p>
<p>索引覆盖:普通索引的B+树中信息涵盖了要查询的信息</p>
<p>索引下推:把 <code>WHERE</code> 里没用到索引的条件<strong>推到引擎层</strong>提前过滤，少回表，变快。(没有索引下推的时候一般只会在引擎层查询一个字段)</p>
<p>什么时候索引会失效(因为写的条件使用索引的效率不高，优化器自动跳过索引进行全表扫描):</p>
<p>违反最左匹配原则</p>
<p>对索引列进行操作:函数操作，数值计算，类型转换</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754835112800-634612d3-dad5-4955-b3b7-a0d89b842f5b.png" alt="img"></p>
<p>因为mysql会自动将字符串转换为数字。</p>
<p>or查询:如果有列不在索引中</p>
<p>创建索引的原则:</p>
<p>发挥索引覆盖和索引下推的优势</p>
<p>不为离散度低的列创建索引</p>
<p>只为进行搜索，排序，分组的列创建索引</p>
<p>用好联合索引(1:不要为联合索引的第一个索引列单独创建索引(浪费空间，并且还浪费时间去维护)，2:建立联合索引的时候，一定要把最常用的列放在最左边)</p>
<p>对长字段创建前缀索引</p>
<p>频繁更新的列不要作为主键或者索引</p>
<p>聚族索引和非聚族索引的区别:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754208770772-4dd9d819-a0ad-454c-be95-593d26e00aac.png" alt="img"></p>
<p>只有聚族索引的叶子节点是数据页剩下的都是索引页</p>
<p>索引是怎么实现的，到叶子节点怎么查询:</p>
<p>1:</p>
<p>类似目录结构，提高搜索效率的。</p>
<p>2:</p>
<p>以页为单位进行数据交换</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754211168595-157f3118-940d-4c24-950a-34ac367e7e9e.png" alt="img"></p>
<p>3:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754212256209-1ca90fac-075e-4716-8ffb-cb7e75e05ac3.png" alt="img"></p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁:"></a>锁:</h3><p>有哪些行级锁:</p>
<p>• 记录锁（record lock）——锁具体一行<br>• 间隙锁（gap lock）——锁两个索引键之间的“空隙”<br>• Next-key lock——上面两者合体（左闭右开区间</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务:"></a>事务:</h3><p>事务的特性和实现:</p>
<p>特性:</p>
<p>原子性，持久性，隔离性，一致性</p>
<p>实现:</p>
<p>持久性通过redolog来实现</p>
<p>原子性通过undolog来实现</p>
<p>隔离性通过MVCC或锁机制来实现</p>
<p>一致性是通过持久性，原子性，隔离性来实现</p>
<p>mysql可能出现什么并发问题:</p>
<p>脏读:</p>
<p>读到了未提交事务修改的数据</p>
<p>不可重复度:</p>
<p>在事务期间有其他事务提交读到了其修改的数据</p>
<p>幻读:</p>
<p>在事务期间查询符合某个条件的数据数量不同</p>
<p>mysql如何解决并发问题的:</p>
<p>锁机制和事务隔离级别</p>
<p>事务的隔离级别有哪些:<br><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754233504568-811a75fe-6e8e-4c7e-8265-965478663843.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1754233514586-aed24f4d-a3b2-425c-b56d-7cc72aa8c600.png" alt="img"></p>
<p>可重复读隔离级别:</p>
<p>如何实现的:</p>
<p>在执行第一个查询语句时候创建Readview</p>
<p>如何在可重复读隔离级别下避免幻读问题:</p>
<p>通过当前读语句SELECT … FOR UPDATE给数据加上next-key lock</p>
<p>介绍MVCC实现原理:</p>
<p>每个事务都有一个ReadView,根据这个ReadView去找对应数据的undolog版本链符合的信息.</p>
<p>undolog链:</p>
<p>第一条在数据页中，下面的在undolog日志中</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1756646416768-bc2270bb-c0ff-4eac-a451-b21d2a584706.png" alt="img"></p>
<p>Readview快照:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/46195092/1756646505384-733cb94e-78ec-4a7d-bdfa-fab89c4926c5.png" alt="img"></p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志:"></a>日志:</h3><p>日志分成哪几类:</p>
<p>undolog:回滚日志，实现了事务的原子性，用于MVCC和事务回滚</p>
<p>redolog:重做日志，实现了事务的持久性，用于掉电等故障的恢复</p>
<p>binlog:二进制日志，是Server层生成的日志，用于数据备份和主从复制</p>
<p>undolog:</p>
<p>讲一下undolog:</p>
<p>事务未提交时，将更新前的数据存到undolog日志文件中。</p>
<p>binlog:</p>
<p>讲一下binlog:</p>
<p>完成一个修改数据的操作，Server会生成一条binlog，事务提交的时候就会写入binlog文件。</p>
<p>能不能只用binlog不用redolog:</p>
<p>binlog是server层日志，没办法记录哪些脏页还没有刷盘</p>
<p>redolog(redolog刷盘成功标志事务提交成功):</p>
<p>1:为什么要有redolog</p>
<p>实现事务的持久性，保证数据库在任何时刻发生崩溃,重启之后已经提交的记录不会消失</p>
<p>将写操作从随机写变成了顺序写(数据不先写回磁盘，后台定期将脏页刷回磁盘)</p>
<p>2:redolog是存在内存中吗</p>
<p>在事务执行过程中会在内存中，事务提交之后就会写到磁盘中</p>
<p>3:怎么保持持久性</p>
<p>数据写入磁盘之前发生宕机，系统可通过redolog来恢复数据</p>
<p>两段提交:</p>
<p>prepare 阶段:将 redo log 对应的事务状态设置为 prepare，然后将 redo log 刷新到硬盘;</p>
<p>commit 阶段:将 binlog 刷新到磁盘，接着调用引擎的提交事务接口，将 redo log 状态设置为commit(将事务设置为 commit 状态后，刷入到磁盘 redo log 文件);</p>
<p>谈谈mysql的双写:</p>
<p>解决了什么问题:</p>
<p>• 如果刷脏过程中机器掉电，就可能出现<strong>页写了一部分</strong>（partial write）：页头、校验和、数据内容不一致。<br>• 仅靠 redo log <strong>无法修复这种物理损坏</strong>（redo 只能重做逻辑操作，不能重建半个坏页）。</p>
<p>触发时机:</p>
<p>只在“刷脏”时用到</p>
<p>怎么实现的:</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1737301211946-81988282-fb5d-44f9-b8d8-94f7396db723.png" alt="img"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2025/09/01/spring/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想:"></a>核心思想:</h3><p>spring的核心:</p>
<p>IOC和AOP</p>
<p>用到了哪些设计模式:</p>
<p>bean的创建:</p>
<p>单例模式</p>
<p>工厂模式</p>
<h3 id="ioc"><a href="#ioc" class="headerlink" title="ioc:"></a>ioc:</h3><p>对ioc的理解?</p>
<p>用ioc容器来控制对象,控制就是对象的创建，初始化，销毁。解决了繁琐的对象生命周期操作。</p>
<p>ioc如何实现的?</p>
<p>依赖注入和容器实现</p>
<p>依赖注入，控制反转分别是什么?</p>
<p>控制反转:流程的控制权从程序员变成了框架</p>
<p>依赖注入:将依赖的类对象通过在外部创建好通过构造函数，函数参数等方式给类使用</p>
<p>如何实现依赖注入:</p>
<p>构造器注入</p>
<p>Setter方法注入</p>
<p>字段注入</p>
<p>spring容器里存储的是什么?</p>
<p>Bean对象</p>
<p>Bean是单例的吗?</p>
<p>默认是单例，也可以通过修改作用域使Bean在每次请求都会创建一个实例。</p>
<p>单例Bean要考虑线程安全问题。</p>
<p>Bean的作用域:</p>
<p>可以通过scope注解自定义实现，默认都是单例，还有像prototype这样的。</p>
<p>Bean的生命周期</p>
<p>生命周期:</p>
<p>1:实例化</p>
<p>2:属性赋值</p>
<p>3:初始化方法:</p>
<p>初始化的前置方法</p>
<p>初始化方法</p>
<p>初始化的后置方法</p>
<p>4:使用</p>
<p>5:销毁</p>
<p>spring如何解决循环依赖?三级缓存结构是什么?为什么用三级缓存解决循环依赖问题?</p>
<p>1:</p>
<p>三级缓存</p>
<p>2:</p>
<p>一级是已经完成实例化的</p>
<p>二级是正在进行属性注入但是发现有循环依赖的</p>
<p>三级是未经加工的工厂，里面创建了原始类，可以通过这个工厂的getObject来获取这个类，如果这个类被代理就会创建代理对象</p>
<p>3:</p>
<p>为了正确处理AOP代理的Bean。<br><strong>三级缓存只是提前“借调”了一次同样的钩子，保证循环依赖时注入的引用就是最终形态，且不会重复生成代理。</strong></p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP:"></a>AOP:</h3><p>AOP的概念:</p>
<p>面向切面编程,能够将与业务无关，却为业务模块所共同调用的逻辑封装起来</p>
<p>大大降低了代码的重复率，降低模块之间的耦合度。</p>
<p>AOP通过什么机制实现的?</p>
<p>动态代理</p>
<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理:"></a>事务管理:</h3><p>概念:</p>
<p>spring提供了一致的事务管理接口，支持声明式和编程式事务。</p>
<p>什么时候会失效?</p>
<p>第一种，<code>@Transactional</code> 注解用在非 public 修饰的方法上。</p>
<p>因为:Spring 的 AOP 代理机制决定了它无法代理 private 方法。</p>
<p>第二种，方法内部调用。</p>
<p>原因:使用的是 this 引用，直接访问原始对象的方法，绕过了 Spring 的代理对象，也就导致代理对象中的事务逻辑没有机会执行。</p>
<p>第三种，如果在事务方法内部用 try-catch 捕获了异常，但没有在 catch 块中将异常重新抛出，或者抛出一个新的能触发回滚的异常。</p>
<p>原因:那么 Spring 的事务拦截器就无法感知到异常的发生，也就没办法回滚。</p>
<p>第四种，Spring 事务默认只对 RuntimeException 和 Error 类型的异常进行回滚。</p>
<h3 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc:"></a>springmvc:</h3><p>处理流程:</p>
<p>1:用户发起的 HTTP 请求，首先会被 DispatcherServlet 捕获</p>
<p>2:会根据 URL、请求方法等信息，交给 HandlerMapping 进行路由匹配，查找对应的处理器，也就是 Controller 中的具体方法。</p>
<p>3:找到对应 Controller 方法后，DispatcherServlet 会委托给处理器适配器 HandlerAdapter 进行调用。</p>
<p>4:Controller 方法最终会返回结果，比如视图名称、ModelAndView 或直接返回 JSON 数据。</p>
<h3 id="springboot"><a href="#springboot" class="headerlink" title="springboot:"></a>springboot:</h3><p>springboot比spring好在哪?</p>
<p>提供了自动配置</p>
<p>内嵌多种服务器</p>
<p>自动配置和自动装配:</p>
<p>自动配置:</p>
<p>classpath中有springboot-starter-*就默认注册所需的全套Bean</p>
<p>一些相关配置只需要在yml中改改就可以了</p>
<p>自动装配:</p>
<p>是实现自动配置的方法</p>
<p>约定优于配置:</p>
<p><strong>Spring Boot 先帮 80 % 的场景定好“潜规则”，你按规则放东西就行；只有剩下 20 % 的个性化需求才需要你去改 yml 或写配置。</strong></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>网络io</title>
    <url>/2025/09/01/%E7%BD%91%E7%BB%9Cio/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2025/08/31/redis/</url>
    <content><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构:"></a>数据结构:</h3><p>底层的数据结构:</p>
<p>String:适用分布式锁，共享信息等</p>
<p>Hash:适用购物车场景</p>
<p>List:适用消息队列</p>
<p>Set:适用点赞场景</p>
<p>Zset:适用与排序场景</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型:"></a>线程模型:</h3><p>redis为什么快:</p>
<p>1:redis大部分操作都是在内存中进行的</p>
<p>2:redis采用了单线程模型避免了多线程的竞争，省去了多线程切换带来时间和性能上的开销</p>
<p>3:采用了io多路复用机制处理大量的客户端请求</p>
<p>redis哪里使用了多线程:</p>
<p>redis会启动后台线程进行【关闭文件，AOF刷盘，释放内存】</p>
<p>6.0以后多线程来处理网络I&#x2F;O但是执行命令仍然是单线程</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务:"></a>事务:</h3><p>如何实现redis的原子性:</p>
<p>lua脚本</p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志:"></a>日志:</h3><p>redis的持久化方法:</p>
<p>AOF日志+RDB快照</p>
<p>AOF日志:每次写操作都追加到日志中,缺点:消耗大</p>
<p>RDB快照:把某一时刻内存中的数据写到磁盘中,缺点:两次快照之间的数据读写会丢失</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h3><p>内存淘汰和过期删除:</p>
<p>过期删除:</p>
<p>redis选择【定期删除和惰性删除】，定期删除:每个一段时间检查一下删除过期数据，惰性删除:当请求访问数据时先判断是否过期，如果过期就删除并返回Null</p>
<p>内存淘汰:</p>
<p>不进行:不再进行服务</p>
<p>进行:优先淘汰快过期的和最近最少访问的</p>
<p>缓存雪崩，击穿，穿透:</p>
<p>穿透:访问不存在的key在redis和mysql里都没有,等同于没有经过redis直接发到mysql  解决方案:针对查询的数据，可以在缓存中设置一个默认值</p>
<p>击穿:某个key突然失效，大量请求发送到mysql上  解决方案:不给热点数据设置过期时间</p>
<p>雪崩:多个key同时失效，大量请求发送到mysql上  解决方案:均匀设置过期时间避免大量数据同时过期</p>
<p>缓存一致性:</p>
<p>写策略:</p>
<p>1:更新数据库的数据</p>
<p>2:删掉缓存</p>
<p>读策略:</p>
<p>1:缓存未命中</p>
<p>2:从数据库中读数据</p>
<p>3:把数据写到缓存里</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>建站过程</title>
    <url>/2025/08/30/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎</a></p>
<p><a href="https://liangshenglei.github.io/2023/03/06/Butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/index.html">Butterfly主题的详细配置 | 梁圣磊の博客</a></p>
<p>域名配置加一条解析在根目录加个文件就可以了s</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
</search>
